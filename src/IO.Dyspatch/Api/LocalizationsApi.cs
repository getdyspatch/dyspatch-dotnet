/* 
 * Dyspatch API
 *
 * # Introduction  The Dyspatch API is based on the REST paradigm, and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs, and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.  ## API Client Libraries  Dyspatch provides API Clients for popular languages and web frameworks.   - [Java](https://github.com/getdyspatch/dyspatch-java) - [Javascript](https://github.com/getdyspatch/dyspatch-javascript) - [Python](https://github.com/getdyspatch/dyspatch-python) 
 *
 * OpenAPI spec version: 2018.08
 * Contact: support@dyspatch.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using IO.Dyspatch.Client;
using IO.Dyspatch.Model;

namespace IO.Dyspatch.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocalizationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Localization Object by ID
        /// </summary>
        /// <remarks>
        /// Returns a specific localization object with a matching ID
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localizationId">A localization ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2018.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2018.08+json\&quot;</param>
        /// <returns>LocalizationRead</returns>
        LocalizationRead LocalizationsLocalizationIdGet (string localizationId, string accept);

        /// <summary>
        /// Get Localization Object by ID
        /// </summary>
        /// <remarks>
        /// Returns a specific localization object with a matching ID
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localizationId">A localization ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2018.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2018.08+json\&quot;</param>
        /// <returns>ApiResponse of LocalizationRead</returns>
        ApiResponse<LocalizationRead> LocalizationsLocalizationIdGetWithHttpInfo (string localizationId, string accept);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Localization Object by ID
        /// </summary>
        /// <remarks>
        /// Returns a specific localization object with a matching ID
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localizationId">A localization ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2018.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2018.08+json\&quot;</param>
        /// <returns>Task of LocalizationRead</returns>
        System.Threading.Tasks.Task<LocalizationRead> LocalizationsLocalizationIdGetAsync (string localizationId, string accept);

        /// <summary>
        /// Get Localization Object by ID
        /// </summary>
        /// <remarks>
        /// Returns a specific localization object with a matching ID
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localizationId">A localization ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2018.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2018.08+json\&quot;</param>
        /// <returns>Task of ApiResponse (LocalizationRead)</returns>
        System.Threading.Tasks.Task<ApiResponse<LocalizationRead>> LocalizationsLocalizationIdGetAsyncWithHttpInfo (string localizationId, string accept);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LocalizationsApi : ILocalizationsApi
    {
        private IO.Dyspatch.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LocalizationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LocalizationsApi(String basePath)
        {
            this.Configuration = new IO.Dyspatch.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Dyspatch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocalizationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LocalizationsApi(IO.Dyspatch.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Dyspatch.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Dyspatch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Dyspatch.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Dyspatch.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Localization Object by ID Returns a specific localization object with a matching ID
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localizationId">A localization ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2018.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2018.08+json\&quot;</param>
        /// <returns>LocalizationRead</returns>
        public LocalizationRead LocalizationsLocalizationIdGet (string localizationId, string accept)
        {
             ApiResponse<LocalizationRead> localVarResponse = LocalizationsLocalizationIdGetWithHttpInfo(localizationId, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Localization Object by ID Returns a specific localization object with a matching ID
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localizationId">A localization ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2018.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2018.08+json\&quot;</param>
        /// <returns>ApiResponse of LocalizationRead</returns>
        public ApiResponse< LocalizationRead > LocalizationsLocalizationIdGetWithHttpInfo (string localizationId, string accept)
        {
            // verify the required parameter 'localizationId' is set
            if (localizationId == null)
                throw new ApiException(400, "Missing required parameter 'localizationId' when calling LocalizationsApi->LocalizationsLocalizationIdGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling LocalizationsApi->LocalizationsLocalizationIdGet");

            var localVarPath = "./localizations/{localizationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.dyspatch.2018.08+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (localizationId != null) localVarPathParams.Add("localizationId", this.Configuration.ApiClient.ParameterToString(localizationId)); // path parameter

            //if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LocalizationsLocalizationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LocalizationRead>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (LocalizationRead) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LocalizationRead)));
        }

        /// <summary>
        /// Get Localization Object by ID Returns a specific localization object with a matching ID
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localizationId">A localization ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2018.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2018.08+json\&quot;</param>
        /// <returns>Task of LocalizationRead</returns>
        public async System.Threading.Tasks.Task<LocalizationRead> LocalizationsLocalizationIdGetAsync (string localizationId, string accept)
        {
             ApiResponse<LocalizationRead> localVarResponse = await LocalizationsLocalizationIdGetAsyncWithHttpInfo(localizationId, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Localization Object by ID Returns a specific localization object with a matching ID
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localizationId">A localization ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2018.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2018.08+json\&quot;</param>
        /// <returns>Task of ApiResponse (LocalizationRead)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LocalizationRead>> LocalizationsLocalizationIdGetAsyncWithHttpInfo (string localizationId, string accept)
        {
            // verify the required parameter 'localizationId' is set
            if (localizationId == null)
                throw new ApiException(400, "Missing required parameter 'localizationId' when calling LocalizationsApi->LocalizationsLocalizationIdGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling LocalizationsApi->LocalizationsLocalizationIdGet");

            var localVarPath = "./localizations/{localizationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.dyspatch.2018.08+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (localizationId != null) localVarPathParams.Add("localizationId", this.Configuration.ApiClient.ParameterToString(localizationId)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LocalizationsLocalizationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LocalizationRead>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (LocalizationRead) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LocalizationRead)));
        }

    }
}
