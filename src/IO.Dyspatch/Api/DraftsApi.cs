/* 
 * Dyspatch API
 *
 * # Introduction  The Dyspatch API is based on the REST paradigm and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.  ## API Client Libraries  Dyspatch provides API Clients for the following languages and web frameworks:  - [Java](https://github.com/getdyspatch/dyspatch-java) - [Javascript](https://github.com/getdyspatch/dyspatch-javascript) - [Python](https://github.com/getdyspatch/dyspatch-python) - [C#](https://github.com/getdyspatch/dyspatch-dotnet) - [Go](https://github.com/getdyspatch/dyspatch-golang) - [Ruby](https://github.com/getdyspatch/dyspatch-ruby) 
 *
 * OpenAPI spec version: 2019.10
 * Contact: support@dyspatch.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using IO.Dyspatch.Client;
using IO.Dyspatch.Model;

namespace IO.Dyspatch.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDraftsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Draft by ID
        /// </summary>
        /// <remarks>
        /// Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the unlocalized default template object.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="targetLanguage">The type of templating language to compile as. Should only be used for visual templates.</param>
        /// <returns>DraftRead</returns>
        DraftRead DraftsDraftIdGet (string draftId, string targetLanguage);

        /// <summary>
        /// Get Draft by ID
        /// </summary>
        /// <remarks>
        /// Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the unlocalized default template object.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="targetLanguage">The type of templating language to compile as. Should only be used for visual templates.</param>
        /// <returns>ApiResponse of DraftRead</returns>
        ApiResponse<DraftRead> DraftsDraftIdGetWithHttpInfo (string draftId, string targetLanguage);
        /// <summary>
        /// Get Localization Keys
        /// </summary>
        /// <remarks>
        /// Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2019.10+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2019.10+x-gettext-translation&#x60; to get the POT file.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2019.10\&quot;, set the value to \&quot;application/vnd.dyspatch.2019.10+json\&quot;. (optional)</param>
        /// <returns>List&lt;LocalizationKeyRead&gt;</returns>
        List<LocalizationKeyRead> DraftsDraftIdLocalizationKeysGet (string draftId, string accept = null);

        /// <summary>
        /// Get Localization Keys
        /// </summary>
        /// <remarks>
        /// Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2019.10+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2019.10+x-gettext-translation&#x60; to get the POT file.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2019.10\&quot;, set the value to \&quot;application/vnd.dyspatch.2019.10+json\&quot;. (optional)</param>
        /// <returns>ApiResponse of List&lt;LocalizationKeyRead&gt;</returns>
        ApiResponse<List<LocalizationKeyRead>> DraftsDraftIdLocalizationKeysGetWithHttpInfo (string draftId, string accept = null);
        /// <summary>
        /// Get Localizations on a Draft
        /// </summary>
        /// <remarks>
        /// Returns localization metadata object for a template draft.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <returns>List&lt;LocalizationMetaRead&gt;</returns>
        List<LocalizationMetaRead> DraftsDraftIdLocalizationsGet (string draftId);

        /// <summary>
        /// Get Localizations on a Draft
        /// </summary>
        /// <remarks>
        /// Returns localization metadata object for a template draft.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <returns>ApiResponse of List&lt;LocalizationMetaRead&gt;</returns>
        ApiResponse<List<LocalizationMetaRead>> DraftsDraftIdLocalizationsGetWithHttpInfo (string draftId);
        /// <summary>
        /// Remove a Localization
        /// </summary>
        /// <remarks>
        /// Deletes the localization with the given &#x60;languageId&#x60; if it exists.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <returns></returns>
        void DraftsDraftIdLocalizationsLanguageIdDelete (string draftId, string languageId);

        /// <summary>
        /// Remove a Localization
        /// </summary>
        /// <remarks>
        /// Deletes the localization with the given &#x60;languageId&#x60; if it exists.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DraftsDraftIdLocalizationsLanguageIdDeleteWithHttpInfo (string draftId, string languageId);
        /// <summary>
        /// Create or Update a Localization
        /// </summary>
        /// <remarks>
        /// Inserts a localization or sets the name on an existing localization that already uses the &#x60;languageId&#x60;.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="body"></param>
        /// <returns></returns>
        void DraftsDraftIdLocalizationsLanguageIdPut (string draftId, string languageId, Body body);

        /// <summary>
        /// Create or Update a Localization
        /// </summary>
        /// <remarks>
        /// Inserts a localization or sets the name on an existing localization that already uses the &#x60;languageId&#x60;.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DraftsDraftIdLocalizationsLanguageIdPutWithHttpInfo (string draftId, string languageId, Body body);
        /// <summary>
        /// Set Translations for Language
        /// </summary>
        /// <remarks>
        /// Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="body"></param>
        /// <returns></returns>
        void DraftsDraftIdLocalizationsLanguageIdTranslationsPut (string draftId, string languageId, Object body);

        /// <summary>
        /// Set Translations for Language
        /// </summary>
        /// <remarks>
        /// Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DraftsDraftIdLocalizationsLanguageIdTranslationsPutWithHttpInfo (string draftId, string languageId, Object body);
        /// <summary>
        /// Submit the Draft for Approval
        /// </summary>
        /// <remarks>
        /// Moves the draft into [submitted and locked state](https://docs.dyspatch.io/templates/submitting_a_template/#awaiting-approval). This will allow your email stakeholders to review the template draft and provide feedback.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <returns></returns>
        void DraftsDraftIdPublishRequestPost (string draftId);

        /// <summary>
        /// Submit the Draft for Approval
        /// </summary>
        /// <remarks>
        /// Moves the draft into [submitted and locked state](https://docs.dyspatch.io/templates/submitting_a_template/#awaiting-approval). This will allow your email stakeholders to review the template draft and provide feedback.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DraftsDraftIdPublishRequestPostWithHttpInfo (string draftId);
        /// <summary>
        /// List Drafts
        /// </summary>
        /// <remarks>
        /// Gets a list of all drafts for your oranization. Up to 25 results returned before results are paginated.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter the list of drafts by a particular status (optional)</param>
        /// <returns>DraftsRead</returns>
        DraftsRead DraftsGet (string status = null);

        /// <summary>
        /// List Drafts
        /// </summary>
        /// <remarks>
        /// Gets a list of all drafts for your oranization. Up to 25 results returned before results are paginated.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter the list of drafts by a particular status (optional)</param>
        /// <returns>ApiResponse of DraftsRead</returns>
        ApiResponse<DraftsRead> DraftsGetWithHttpInfo (string status = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Draft by ID
        /// </summary>
        /// <remarks>
        /// Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the unlocalized default template object.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="targetLanguage">The type of templating language to compile as. Should only be used for visual templates.</param>
        /// <returns>Task of DraftRead</returns>
        System.Threading.Tasks.Task<DraftRead> DraftsDraftIdGetAsync (string draftId, string targetLanguage);

        /// <summary>
        /// Get Draft by ID
        /// </summary>
        /// <remarks>
        /// Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the unlocalized default template object.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="targetLanguage">The type of templating language to compile as. Should only be used for visual templates.</param>
        /// <returns>Task of ApiResponse (DraftRead)</returns>
        System.Threading.Tasks.Task<ApiResponse<DraftRead>> DraftsDraftIdGetAsyncWithHttpInfo (string draftId, string targetLanguage);
        /// <summary>
        /// Get Localization Keys
        /// </summary>
        /// <remarks>
        /// Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2019.10+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2019.10+x-gettext-translation&#x60; to get the POT file.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2019.10\&quot;, set the value to \&quot;application/vnd.dyspatch.2019.10+json\&quot;. (optional)</param>
        /// <returns>Task of List&lt;LocalizationKeyRead&gt;</returns>
        System.Threading.Tasks.Task<List<LocalizationKeyRead>> DraftsDraftIdLocalizationKeysGetAsync (string draftId, string accept = null);

        /// <summary>
        /// Get Localization Keys
        /// </summary>
        /// <remarks>
        /// Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2019.10+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2019.10+x-gettext-translation&#x60; to get the POT file.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2019.10\&quot;, set the value to \&quot;application/vnd.dyspatch.2019.10+json\&quot;. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocalizationKeyRead&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LocalizationKeyRead>>> DraftsDraftIdLocalizationKeysGetAsyncWithHttpInfo (string draftId, string accept = null);
        /// <summary>
        /// Get Localizations on a Draft
        /// </summary>
        /// <remarks>
        /// Returns localization metadata object for a template draft.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <returns>Task of List&lt;LocalizationMetaRead&gt;</returns>
        System.Threading.Tasks.Task<List<LocalizationMetaRead>> DraftsDraftIdLocalizationsGetAsync (string draftId);

        /// <summary>
        /// Get Localizations on a Draft
        /// </summary>
        /// <remarks>
        /// Returns localization metadata object for a template draft.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <returns>Task of ApiResponse (List&lt;LocalizationMetaRead&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LocalizationMetaRead>>> DraftsDraftIdLocalizationsGetAsyncWithHttpInfo (string draftId);
        /// <summary>
        /// Remove a Localization
        /// </summary>
        /// <remarks>
        /// Deletes the localization with the given &#x60;languageId&#x60; if it exists.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DraftsDraftIdLocalizationsLanguageIdDeleteAsync (string draftId, string languageId);

        /// <summary>
        /// Remove a Localization
        /// </summary>
        /// <remarks>
        /// Deletes the localization with the given &#x60;languageId&#x60; if it exists.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DraftsDraftIdLocalizationsLanguageIdDeleteAsyncWithHttpInfo (string draftId, string languageId);
        /// <summary>
        /// Create or Update a Localization
        /// </summary>
        /// <remarks>
        /// Inserts a localization or sets the name on an existing localization that already uses the &#x60;languageId&#x60;.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DraftsDraftIdLocalizationsLanguageIdPutAsync (string draftId, string languageId, Body body);

        /// <summary>
        /// Create or Update a Localization
        /// </summary>
        /// <remarks>
        /// Inserts a localization or sets the name on an existing localization that already uses the &#x60;languageId&#x60;.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DraftsDraftIdLocalizationsLanguageIdPutAsyncWithHttpInfo (string draftId, string languageId, Body body);
        /// <summary>
        /// Set Translations for Language
        /// </summary>
        /// <remarks>
        /// Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DraftsDraftIdLocalizationsLanguageIdTranslationsPutAsync (string draftId, string languageId, Object body);

        /// <summary>
        /// Set Translations for Language
        /// </summary>
        /// <remarks>
        /// Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DraftsDraftIdLocalizationsLanguageIdTranslationsPutAsyncWithHttpInfo (string draftId, string languageId, Object body);
        /// <summary>
        /// Submit the Draft for Approval
        /// </summary>
        /// <remarks>
        /// Moves the draft into [submitted and locked state](https://docs.dyspatch.io/templates/submitting_a_template/#awaiting-approval). This will allow your email stakeholders to review the template draft and provide feedback.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DraftsDraftIdPublishRequestPostAsync (string draftId);

        /// <summary>
        /// Submit the Draft for Approval
        /// </summary>
        /// <remarks>
        /// Moves the draft into [submitted and locked state](https://docs.dyspatch.io/templates/submitting_a_template/#awaiting-approval). This will allow your email stakeholders to review the template draft and provide feedback.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DraftsDraftIdPublishRequestPostAsyncWithHttpInfo (string draftId);
        /// <summary>
        /// List Drafts
        /// </summary>
        /// <remarks>
        /// Gets a list of all drafts for your oranization. Up to 25 results returned before results are paginated.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter the list of drafts by a particular status (optional)</param>
        /// <returns>Task of DraftsRead</returns>
        System.Threading.Tasks.Task<DraftsRead> DraftsGetAsync (string status = null);

        /// <summary>
        /// List Drafts
        /// </summary>
        /// <remarks>
        /// Gets a list of all drafts for your oranization. Up to 25 results returned before results are paginated.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter the list of drafts by a particular status (optional)</param>
        /// <returns>Task of ApiResponse (DraftsRead)</returns>
        System.Threading.Tasks.Task<ApiResponse<DraftsRead>> DraftsGetAsyncWithHttpInfo (string status = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DraftsApi : IDraftsApi
    {
        private IO.Dyspatch.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DraftsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DraftsApi(String basePath)
        {
            this.Configuration = new IO.Dyspatch.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Dyspatch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DraftsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DraftsApi(IO.Dyspatch.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Dyspatch.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Dyspatch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Dyspatch.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Dyspatch.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Draft by ID Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the unlocalized default template object.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="targetLanguage">The type of templating language to compile as. Should only be used for visual templates.</param>
        /// <returns>DraftRead</returns>
        public DraftRead DraftsDraftIdGet (string draftId, string targetLanguage)
        {
             ApiResponse<DraftRead> localVarResponse = DraftsDraftIdGetWithHttpInfo(draftId, targetLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Draft by ID Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the unlocalized default template object.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="targetLanguage">The type of templating language to compile as. Should only be used for visual templates.</param>
        /// <returns>ApiResponse of DraftRead</returns>
        public ApiResponse< DraftRead > DraftsDraftIdGetWithHttpInfo (string draftId, string targetLanguage)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->DraftsDraftIdGet");
            // verify the required parameter 'targetLanguage' is set
            if (targetLanguage == null)
                throw new ApiException(400, "Missing required parameter 'targetLanguage' when calling DraftsApi->DraftsDraftIdGet");

            var localVarPath = "./drafts/{draftId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.dyspatch.2019.10+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (draftId != null) localVarPathParams.Add("draftId", this.Configuration.ApiClient.ParameterToString(draftId)); // path parameter
            if (targetLanguage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetLanguage", targetLanguage)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DraftsDraftIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DraftRead>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DraftRead) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DraftRead)));
        }

        /// <summary>
        /// Get Draft by ID Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the unlocalized default template object.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="targetLanguage">The type of templating language to compile as. Should only be used for visual templates.</param>
        /// <returns>Task of DraftRead</returns>
        public async System.Threading.Tasks.Task<DraftRead> DraftsDraftIdGetAsync (string draftId, string targetLanguage)
        {
             ApiResponse<DraftRead> localVarResponse = await DraftsDraftIdGetAsyncWithHttpInfo(draftId, targetLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Draft by ID Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the unlocalized default template object.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="targetLanguage">The type of templating language to compile as. Should only be used for visual templates.</param>
        /// <returns>Task of ApiResponse (DraftRead)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DraftRead>> DraftsDraftIdGetAsyncWithHttpInfo (string draftId, string targetLanguage)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->DraftsDraftIdGet");
            // verify the required parameter 'targetLanguage' is set
            if (targetLanguage == null)
                throw new ApiException(400, "Missing required parameter 'targetLanguage' when calling DraftsApi->DraftsDraftIdGet");

            var localVarPath = "./drafts/{draftId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.dyspatch.2019.10+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (draftId != null) localVarPathParams.Add("draftId", this.Configuration.ApiClient.ParameterToString(draftId)); // path parameter
            if (targetLanguage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetLanguage", targetLanguage)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DraftsDraftIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DraftRead>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DraftRead) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DraftRead)));
        }

        /// <summary>
        /// Get Localization Keys Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2019.10+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2019.10+x-gettext-translation&#x60; to get the POT file.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2019.10\&quot;, set the value to \&quot;application/vnd.dyspatch.2019.10+json\&quot;. (optional)</param>
        /// <returns>List&lt;LocalizationKeyRead&gt;</returns>
        public List<LocalizationKeyRead> DraftsDraftIdLocalizationKeysGet (string draftId, string accept = null)
        {
             ApiResponse<List<LocalizationKeyRead>> localVarResponse = DraftsDraftIdLocalizationKeysGetWithHttpInfo(draftId, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Localization Keys Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2019.10+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2019.10+x-gettext-translation&#x60; to get the POT file.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2019.10\&quot;, set the value to \&quot;application/vnd.dyspatch.2019.10+json\&quot;. (optional)</param>
        /// <returns>ApiResponse of List&lt;LocalizationKeyRead&gt;</returns>
        public ApiResponse< List<LocalizationKeyRead> > DraftsDraftIdLocalizationKeysGetWithHttpInfo (string draftId, string accept = null)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->DraftsDraftIdLocalizationKeysGet");

            var localVarPath = "./drafts/{draftId}/localizationKeys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.dyspatch.2019.10+json",
                "text/vnd.dyspatch.2019.10+x-gettext-translation"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (draftId != null) localVarPathParams.Add("draftId", this.Configuration.ApiClient.ParameterToString(draftId)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DraftsDraftIdLocalizationKeysGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocalizationKeyRead>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<LocalizationKeyRead>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocalizationKeyRead>)));
        }

        /// <summary>
        /// Get Localization Keys Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2019.10+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2019.10+x-gettext-translation&#x60; to get the POT file.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2019.10\&quot;, set the value to \&quot;application/vnd.dyspatch.2019.10+json\&quot;. (optional)</param>
        /// <returns>Task of List&lt;LocalizationKeyRead&gt;</returns>
        public async System.Threading.Tasks.Task<List<LocalizationKeyRead>> DraftsDraftIdLocalizationKeysGetAsync (string draftId, string accept = null)
        {
             ApiResponse<List<LocalizationKeyRead>> localVarResponse = await DraftsDraftIdLocalizationKeysGetAsyncWithHttpInfo(draftId, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Localization Keys Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2019.10+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2019.10+x-gettext-translation&#x60; to get the POT file.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2019.10\&quot;, set the value to \&quot;application/vnd.dyspatch.2019.10+json\&quot;. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocalizationKeyRead&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LocalizationKeyRead>>> DraftsDraftIdLocalizationKeysGetAsyncWithHttpInfo (string draftId, string accept = null)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->DraftsDraftIdLocalizationKeysGet");

            var localVarPath = "./drafts/{draftId}/localizationKeys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.dyspatch.2019.10+json",
                "text/vnd.dyspatch.2019.10+x-gettext-translation"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (draftId != null) localVarPathParams.Add("draftId", this.Configuration.ApiClient.ParameterToString(draftId)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DraftsDraftIdLocalizationKeysGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocalizationKeyRead>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<LocalizationKeyRead>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocalizationKeyRead>)));
        }

        /// <summary>
        /// Get Localizations on a Draft Returns localization metadata object for a template draft.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <returns>List&lt;LocalizationMetaRead&gt;</returns>
        public List<LocalizationMetaRead> DraftsDraftIdLocalizationsGet (string draftId)
        {
             ApiResponse<List<LocalizationMetaRead>> localVarResponse = DraftsDraftIdLocalizationsGetWithHttpInfo(draftId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Localizations on a Draft Returns localization metadata object for a template draft.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <returns>ApiResponse of List&lt;LocalizationMetaRead&gt;</returns>
        public ApiResponse< List<LocalizationMetaRead> > DraftsDraftIdLocalizationsGetWithHttpInfo (string draftId)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->DraftsDraftIdLocalizationsGet");

            var localVarPath = "./drafts/{draftId}/localizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.dyspatch.2019.10+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (draftId != null) localVarPathParams.Add("draftId", this.Configuration.ApiClient.ParameterToString(draftId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DraftsDraftIdLocalizationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocalizationMetaRead>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<LocalizationMetaRead>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocalizationMetaRead>)));
        }

        /// <summary>
        /// Get Localizations on a Draft Returns localization metadata object for a template draft.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <returns>Task of List&lt;LocalizationMetaRead&gt;</returns>
        public async System.Threading.Tasks.Task<List<LocalizationMetaRead>> DraftsDraftIdLocalizationsGetAsync (string draftId)
        {
             ApiResponse<List<LocalizationMetaRead>> localVarResponse = await DraftsDraftIdLocalizationsGetAsyncWithHttpInfo(draftId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Localizations on a Draft Returns localization metadata object for a template draft.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <returns>Task of ApiResponse (List&lt;LocalizationMetaRead&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LocalizationMetaRead>>> DraftsDraftIdLocalizationsGetAsyncWithHttpInfo (string draftId)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->DraftsDraftIdLocalizationsGet");

            var localVarPath = "./drafts/{draftId}/localizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.dyspatch.2019.10+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (draftId != null) localVarPathParams.Add("draftId", this.Configuration.ApiClient.ParameterToString(draftId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DraftsDraftIdLocalizationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocalizationMetaRead>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<LocalizationMetaRead>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocalizationMetaRead>)));
        }

        /// <summary>
        /// Remove a Localization Deletes the localization with the given &#x60;languageId&#x60; if it exists.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <returns></returns>
        public void DraftsDraftIdLocalizationsLanguageIdDelete (string draftId, string languageId)
        {
             DraftsDraftIdLocalizationsLanguageIdDeleteWithHttpInfo(draftId, languageId);
        }

        /// <summary>
        /// Remove a Localization Deletes the localization with the given &#x60;languageId&#x60; if it exists.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DraftsDraftIdLocalizationsLanguageIdDeleteWithHttpInfo (string draftId, string languageId)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->DraftsDraftIdLocalizationsLanguageIdDelete");
            // verify the required parameter 'languageId' is set
            if (languageId == null)
                throw new ApiException(400, "Missing required parameter 'languageId' when calling DraftsApi->DraftsDraftIdLocalizationsLanguageIdDelete");

            var localVarPath = "./drafts/{draftId}/localizations/{languageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.dyspatch.2019.10+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (draftId != null) localVarPathParams.Add("draftId", this.Configuration.ApiClient.ParameterToString(draftId)); // path parameter
            if (languageId != null) localVarPathParams.Add("languageId", this.Configuration.ApiClient.ParameterToString(languageId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DraftsDraftIdLocalizationsLanguageIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a Localization Deletes the localization with the given &#x60;languageId&#x60; if it exists.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DraftsDraftIdLocalizationsLanguageIdDeleteAsync (string draftId, string languageId)
        {
             await DraftsDraftIdLocalizationsLanguageIdDeleteAsyncWithHttpInfo(draftId, languageId);

        }

        /// <summary>
        /// Remove a Localization Deletes the localization with the given &#x60;languageId&#x60; if it exists.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DraftsDraftIdLocalizationsLanguageIdDeleteAsyncWithHttpInfo (string draftId, string languageId)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->DraftsDraftIdLocalizationsLanguageIdDelete");
            // verify the required parameter 'languageId' is set
            if (languageId == null)
                throw new ApiException(400, "Missing required parameter 'languageId' when calling DraftsApi->DraftsDraftIdLocalizationsLanguageIdDelete");

            var localVarPath = "./drafts/{draftId}/localizations/{languageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.dyspatch.2019.10+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (draftId != null) localVarPathParams.Add("draftId", this.Configuration.ApiClient.ParameterToString(draftId)); // path parameter
            if (languageId != null) localVarPathParams.Add("languageId", this.Configuration.ApiClient.ParameterToString(languageId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DraftsDraftIdLocalizationsLanguageIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create or Update a Localization Inserts a localization or sets the name on an existing localization that already uses the &#x60;languageId&#x60;.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="body"></param>
        /// <returns></returns>
        public void DraftsDraftIdLocalizationsLanguageIdPut (string draftId, string languageId, Body body)
        {
             DraftsDraftIdLocalizationsLanguageIdPutWithHttpInfo(draftId, languageId, body);
        }

        /// <summary>
        /// Create or Update a Localization Inserts a localization or sets the name on an existing localization that already uses the &#x60;languageId&#x60;.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DraftsDraftIdLocalizationsLanguageIdPutWithHttpInfo (string draftId, string languageId, Body body)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->DraftsDraftIdLocalizationsLanguageIdPut");
            // verify the required parameter 'languageId' is set
            if (languageId == null)
                throw new ApiException(400, "Missing required parameter 'languageId' when calling DraftsApi->DraftsDraftIdLocalizationsLanguageIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DraftsApi->DraftsDraftIdLocalizationsLanguageIdPut");

            var localVarPath = "./drafts/{draftId}/localizations/{languageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.dyspatch.2019.10+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (draftId != null) localVarPathParams.Add("draftId", this.Configuration.ApiClient.ParameterToString(draftId)); // path parameter
            if (languageId != null) localVarPathParams.Add("languageId", this.Configuration.ApiClient.ParameterToString(languageId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DraftsDraftIdLocalizationsLanguageIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create or Update a Localization Inserts a localization or sets the name on an existing localization that already uses the &#x60;languageId&#x60;.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DraftsDraftIdLocalizationsLanguageIdPutAsync (string draftId, string languageId, Body body)
        {
             await DraftsDraftIdLocalizationsLanguageIdPutAsyncWithHttpInfo(draftId, languageId, body);

        }

        /// <summary>
        /// Create or Update a Localization Inserts a localization or sets the name on an existing localization that already uses the &#x60;languageId&#x60;.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DraftsDraftIdLocalizationsLanguageIdPutAsyncWithHttpInfo (string draftId, string languageId, Body body)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->DraftsDraftIdLocalizationsLanguageIdPut");
            // verify the required parameter 'languageId' is set
            if (languageId == null)
                throw new ApiException(400, "Missing required parameter 'languageId' when calling DraftsApi->DraftsDraftIdLocalizationsLanguageIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DraftsApi->DraftsDraftIdLocalizationsLanguageIdPut");

            var localVarPath = "./drafts/{draftId}/localizations/{languageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.dyspatch.2019.10+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (draftId != null) localVarPathParams.Add("draftId", this.Configuration.ApiClient.ParameterToString(draftId)); // path parameter
            if (languageId != null) localVarPathParams.Add("languageId", this.Configuration.ApiClient.ParameterToString(languageId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DraftsDraftIdLocalizationsLanguageIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set Translations for Language Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="body"></param>
        /// <returns></returns>
        public void DraftsDraftIdLocalizationsLanguageIdTranslationsPut (string draftId, string languageId, Object body)
        {
             DraftsDraftIdLocalizationsLanguageIdTranslationsPutWithHttpInfo(draftId, languageId, body);
        }

        /// <summary>
        /// Set Translations for Language Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DraftsDraftIdLocalizationsLanguageIdTranslationsPutWithHttpInfo (string draftId, string languageId, Object body)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->DraftsDraftIdLocalizationsLanguageIdTranslationsPut");
            // verify the required parameter 'languageId' is set
            if (languageId == null)
                throw new ApiException(400, "Missing required parameter 'languageId' when calling DraftsApi->DraftsDraftIdLocalizationsLanguageIdTranslationsPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DraftsApi->DraftsDraftIdLocalizationsLanguageIdTranslationsPut");

            var localVarPath = "./drafts/{draftId}/localizations/{languageId}/translations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.dyspatch.2019.10+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (draftId != null) localVarPathParams.Add("draftId", this.Configuration.ApiClient.ParameterToString(draftId)); // path parameter
            if (languageId != null) localVarPathParams.Add("languageId", this.Configuration.ApiClient.ParameterToString(languageId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DraftsDraftIdLocalizationsLanguageIdTranslationsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set Translations for Language Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DraftsDraftIdLocalizationsLanguageIdTranslationsPutAsync (string draftId, string languageId, Object body)
        {
             await DraftsDraftIdLocalizationsLanguageIdTranslationsPutAsyncWithHttpInfo(draftId, languageId, body);

        }

        /// <summary>
        /// Set Translations for Language Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DraftsDraftIdLocalizationsLanguageIdTranslationsPutAsyncWithHttpInfo (string draftId, string languageId, Object body)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->DraftsDraftIdLocalizationsLanguageIdTranslationsPut");
            // verify the required parameter 'languageId' is set
            if (languageId == null)
                throw new ApiException(400, "Missing required parameter 'languageId' when calling DraftsApi->DraftsDraftIdLocalizationsLanguageIdTranslationsPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DraftsApi->DraftsDraftIdLocalizationsLanguageIdTranslationsPut");

            var localVarPath = "./drafts/{draftId}/localizations/{languageId}/translations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.dyspatch.2019.10+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (draftId != null) localVarPathParams.Add("draftId", this.Configuration.ApiClient.ParameterToString(draftId)); // path parameter
            if (languageId != null) localVarPathParams.Add("languageId", this.Configuration.ApiClient.ParameterToString(languageId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DraftsDraftIdLocalizationsLanguageIdTranslationsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Submit the Draft for Approval Moves the draft into [submitted and locked state](https://docs.dyspatch.io/templates/submitting_a_template/#awaiting-approval). This will allow your email stakeholders to review the template draft and provide feedback.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <returns></returns>
        public void DraftsDraftIdPublishRequestPost (string draftId)
        {
             DraftsDraftIdPublishRequestPostWithHttpInfo(draftId);
        }

        /// <summary>
        /// Submit the Draft for Approval Moves the draft into [submitted and locked state](https://docs.dyspatch.io/templates/submitting_a_template/#awaiting-approval). This will allow your email stakeholders to review the template draft and provide feedback.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DraftsDraftIdPublishRequestPostWithHttpInfo (string draftId)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->DraftsDraftIdPublishRequestPost");

            var localVarPath = "./drafts/{draftId}/publishRequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.dyspatch.2019.10+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (draftId != null) localVarPathParams.Add("draftId", this.Configuration.ApiClient.ParameterToString(draftId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DraftsDraftIdPublishRequestPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Submit the Draft for Approval Moves the draft into [submitted and locked state](https://docs.dyspatch.io/templates/submitting_a_template/#awaiting-approval). This will allow your email stakeholders to review the template draft and provide feedback.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DraftsDraftIdPublishRequestPostAsync (string draftId)
        {
             await DraftsDraftIdPublishRequestPostAsyncWithHttpInfo(draftId);

        }

        /// <summary>
        /// Submit the Draft for Approval Moves the draft into [submitted and locked state](https://docs.dyspatch.io/templates/submitting_a_template/#awaiting-approval). This will allow your email stakeholders to review the template draft and provide feedback.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DraftsDraftIdPublishRequestPostAsyncWithHttpInfo (string draftId)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->DraftsDraftIdPublishRequestPost");

            var localVarPath = "./drafts/{draftId}/publishRequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.dyspatch.2019.10+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (draftId != null) localVarPathParams.Add("draftId", this.Configuration.ApiClient.ParameterToString(draftId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DraftsDraftIdPublishRequestPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List Drafts Gets a list of all drafts for your oranization. Up to 25 results returned before results are paginated.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter the list of drafts by a particular status (optional)</param>
        /// <returns>DraftsRead</returns>
        public DraftsRead DraftsGet (string status = null)
        {
             ApiResponse<DraftsRead> localVarResponse = DraftsGetWithHttpInfo(status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Drafts Gets a list of all drafts for your oranization. Up to 25 results returned before results are paginated.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter the list of drafts by a particular status (optional)</param>
        /// <returns>ApiResponse of DraftsRead</returns>
        public ApiResponse< DraftsRead > DraftsGetWithHttpInfo (string status = null)
        {

            var localVarPath = "./drafts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.dyspatch.2019.10+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DraftsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DraftsRead>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DraftsRead) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DraftsRead)));
        }

        /// <summary>
        /// List Drafts Gets a list of all drafts for your oranization. Up to 25 results returned before results are paginated.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter the list of drafts by a particular status (optional)</param>
        /// <returns>Task of DraftsRead</returns>
        public async System.Threading.Tasks.Task<DraftsRead> DraftsGetAsync (string status = null)
        {
             ApiResponse<DraftsRead> localVarResponse = await DraftsGetAsyncWithHttpInfo(status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Drafts Gets a list of all drafts for your oranization. Up to 25 results returned before results are paginated.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter the list of drafts by a particular status (optional)</param>
        /// <returns>Task of ApiResponse (DraftsRead)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DraftsRead>> DraftsGetAsyncWithHttpInfo (string status = null)
        {

            var localVarPath = "./drafts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.dyspatch.2019.10+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DraftsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DraftsRead>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DraftsRead) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DraftsRead)));
        }

    }
}
