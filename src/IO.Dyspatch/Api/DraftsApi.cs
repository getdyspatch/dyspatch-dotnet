/* 
 * Dyspatch API
 *
 * # Introduction  The Dyspatch API is based on the REST paradigm, and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs, and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.  ## API Client Libraries Dyspatch provides API Clients for popular languages and web frameworks.  - [Java](https://github.com/getdyspatch/dyspatch-java) - [Javascript](https://github.com/getdyspatch/dyspatch-javascript) - [Python](https://github.com/getdyspatch/dyspatch-python) - [C#](https://github.com/getdyspatch/dyspatch-dotnet) - [Go](https://github.com/getdyspatch/dyspatch-golang) - [Ruby](https://github.com/getdyspatch/dyspatch-ruby) 
 *
 * The version of the OpenAPI document: 2020.08
 * Contact: support@dyspatch.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using IO.Dyspatch.Client;
using IO.Dyspatch.Model;

namespace IO.Dyspatch.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDraftsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Remove a localization
        /// </summary>
        /// <remarks>
        /// Deletes the localization with the given language ID if it exists
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns></returns>
        void DeleteLocalization (string draftId, string languageId, string accept);

        /// <summary>
        /// Remove a localization
        /// </summary>
        /// <remarks>
        /// Deletes the localization with the given language ID if it exists
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLocalizationWithHttpInfo (string draftId, string languageId, string accept);
        /// <summary>
        /// Get Draft by ID
        /// </summary>
        /// <remarks>
        /// Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the template in the default, unlocalized form.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="targetLanguage">The type of templating language to compile as. Should only be used for visual templates.</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>DraftRead</returns>
        DraftRead GetDraftById (string draftId, string targetLanguage, string accept);

        /// <summary>
        /// Get Draft by ID
        /// </summary>
        /// <remarks>
        /// Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the template in the default, unlocalized form.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="targetLanguage">The type of templating language to compile as. Should only be used for visual templates.</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>ApiResponse of DraftRead</returns>
        ApiResponse<DraftRead> GetDraftByIdWithHttpInfo (string draftId, string targetLanguage, string accept);
        /// <summary>
        /// Get localization keys
        /// </summary>
        /// <remarks>
        /// Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2020.08+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2020.08+x-gettext-translation&#x60; to get the POT file.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>List&lt;LocalizationKeyRead&gt;</returns>
        List<LocalizationKeyRead> GetDraftLocalizationKeys (string draftId, string accept);

        /// <summary>
        /// Get localization keys
        /// </summary>
        /// <remarks>
        /// Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2020.08+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2020.08+x-gettext-translation&#x60; to get the POT file.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>ApiResponse of List&lt;LocalizationKeyRead&gt;</returns>
        ApiResponse<List<LocalizationKeyRead>> GetDraftLocalizationKeysWithHttpInfo (string draftId, string accept);
        /// <summary>
        /// List Drafts
        /// </summary>
        /// <remarks>
        /// Returns all drafts for your organization.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="cursor">A cursor value used to retrieve a specific page from a paginated result set. (optional)</param>
        /// <param name="status">Filter the list of drafts by a particular status (optional)</param>
        /// <returns>DraftsRead</returns>
        DraftsRead GetDrafts (string accept, string cursor = default(string), string status = default(string));

        /// <summary>
        /// List Drafts
        /// </summary>
        /// <remarks>
        /// Returns all drafts for your organization.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="cursor">A cursor value used to retrieve a specific page from a paginated result set. (optional)</param>
        /// <param name="status">Filter the list of drafts by a particular status (optional)</param>
        /// <returns>ApiResponse of DraftsRead</returns>
        ApiResponse<DraftsRead> GetDraftsWithHttpInfo (string accept, string cursor = default(string), string status = default(string));
        /// <summary>
        /// Get localizations on a draft
        /// </summary>
        /// <remarks>
        /// Returns localization metadata for the draft
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>List&lt;LocalizationMetaRead&gt;</returns>
        List<LocalizationMetaRead> GetLocalizationForDraft (string draftId, string accept);

        /// <summary>
        /// Get localizations on a draft
        /// </summary>
        /// <remarks>
        /// Returns localization metadata for the draft
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>ApiResponse of List&lt;LocalizationMetaRead&gt;</returns>
        ApiResponse<List<LocalizationMetaRead>> GetLocalizationForDraftWithHttpInfo (string draftId, string accept);
        /// <summary>
        /// Create or update a localization
        /// </summary>
        /// <remarks>
        /// Inserts a localization or sets the name on an existing localization that already uses the languageId
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="inlineObject"></param>
        /// <returns></returns>
        void SaveLocalization (string draftId, string languageId, string accept, InlineObject inlineObject);

        /// <summary>
        /// Create or update a localization
        /// </summary>
        /// <remarks>
        /// Inserts a localization or sets the name on an existing localization that already uses the languageId
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="inlineObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SaveLocalizationWithHttpInfo (string draftId, string languageId, string accept, InlineObject inlineObject);
        /// <summary>
        /// Set translations for language
        /// </summary>
        /// <remarks>
        /// Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="requestBody"></param>
        /// <returns></returns>
        void SetTranslation (string draftId, string languageId, string accept, Dictionary<string, string> requestBody);

        /// <summary>
        /// Set translations for language
        /// </summary>
        /// <remarks>
        /// Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="requestBody"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetTranslationWithHttpInfo (string draftId, string languageId, string accept, Dictionary<string, string> requestBody);
        /// <summary>
        /// Submit the draft for approval
        /// </summary>
        /// <remarks>
        /// Moves the draft into submitted state.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns></returns>
        void SubmitDraftForApproval (string draftId, string accept);

        /// <summary>
        /// Submit the draft for approval
        /// </summary>
        /// <remarks>
        /// Moves the draft into submitted state.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubmitDraftForApprovalWithHttpInfo (string draftId, string accept);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDraftsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Remove a localization
        /// </summary>
        /// <remarks>
        /// Deletes the localization with the given language ID if it exists
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLocalizationAsync (string draftId, string languageId, string accept);

        /// <summary>
        /// Remove a localization
        /// </summary>
        /// <remarks>
        /// Deletes the localization with the given language ID if it exists
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLocalizationAsyncWithHttpInfo (string draftId, string languageId, string accept);
        /// <summary>
        /// Get Draft by ID
        /// </summary>
        /// <remarks>
        /// Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the template in the default, unlocalized form.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="targetLanguage">The type of templating language to compile as. Should only be used for visual templates.</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>Task of DraftRead</returns>
        System.Threading.Tasks.Task<DraftRead> GetDraftByIdAsync (string draftId, string targetLanguage, string accept);

        /// <summary>
        /// Get Draft by ID
        /// </summary>
        /// <remarks>
        /// Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the template in the default, unlocalized form.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="targetLanguage">The type of templating language to compile as. Should only be used for visual templates.</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>Task of ApiResponse (DraftRead)</returns>
        System.Threading.Tasks.Task<ApiResponse<DraftRead>> GetDraftByIdAsyncWithHttpInfo (string draftId, string targetLanguage, string accept);
        /// <summary>
        /// Get localization keys
        /// </summary>
        /// <remarks>
        /// Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2020.08+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2020.08+x-gettext-translation&#x60; to get the POT file.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>Task of List&lt;LocalizationKeyRead&gt;</returns>
        System.Threading.Tasks.Task<List<LocalizationKeyRead>> GetDraftLocalizationKeysAsync (string draftId, string accept);

        /// <summary>
        /// Get localization keys
        /// </summary>
        /// <remarks>
        /// Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2020.08+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2020.08+x-gettext-translation&#x60; to get the POT file.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>Task of ApiResponse (List&lt;LocalizationKeyRead&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LocalizationKeyRead>>> GetDraftLocalizationKeysAsyncWithHttpInfo (string draftId, string accept);
        /// <summary>
        /// List Drafts
        /// </summary>
        /// <remarks>
        /// Returns all drafts for your organization.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="cursor">A cursor value used to retrieve a specific page from a paginated result set. (optional)</param>
        /// <param name="status">Filter the list of drafts by a particular status (optional)</param>
        /// <returns>Task of DraftsRead</returns>
        System.Threading.Tasks.Task<DraftsRead> GetDraftsAsync (string accept, string cursor = default(string), string status = default(string));

        /// <summary>
        /// List Drafts
        /// </summary>
        /// <remarks>
        /// Returns all drafts for your organization.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="cursor">A cursor value used to retrieve a specific page from a paginated result set. (optional)</param>
        /// <param name="status">Filter the list of drafts by a particular status (optional)</param>
        /// <returns>Task of ApiResponse (DraftsRead)</returns>
        System.Threading.Tasks.Task<ApiResponse<DraftsRead>> GetDraftsAsyncWithHttpInfo (string accept, string cursor = default(string), string status = default(string));
        /// <summary>
        /// Get localizations on a draft
        /// </summary>
        /// <remarks>
        /// Returns localization metadata for the draft
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>Task of List&lt;LocalizationMetaRead&gt;</returns>
        System.Threading.Tasks.Task<List<LocalizationMetaRead>> GetLocalizationForDraftAsync (string draftId, string accept);

        /// <summary>
        /// Get localizations on a draft
        /// </summary>
        /// <remarks>
        /// Returns localization metadata for the draft
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>Task of ApiResponse (List&lt;LocalizationMetaRead&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LocalizationMetaRead>>> GetLocalizationForDraftAsyncWithHttpInfo (string draftId, string accept);
        /// <summary>
        /// Create or update a localization
        /// </summary>
        /// <remarks>
        /// Inserts a localization or sets the name on an existing localization that already uses the languageId
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="inlineObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SaveLocalizationAsync (string draftId, string languageId, string accept, InlineObject inlineObject);

        /// <summary>
        /// Create or update a localization
        /// </summary>
        /// <remarks>
        /// Inserts a localization or sets the name on an existing localization that already uses the languageId
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="inlineObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SaveLocalizationAsyncWithHttpInfo (string draftId, string languageId, string accept, InlineObject inlineObject);
        /// <summary>
        /// Set translations for language
        /// </summary>
        /// <remarks>
        /// Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="requestBody"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetTranslationAsync (string draftId, string languageId, string accept, Dictionary<string, string> requestBody);

        /// <summary>
        /// Set translations for language
        /// </summary>
        /// <remarks>
        /// Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="requestBody"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetTranslationAsyncWithHttpInfo (string draftId, string languageId, string accept, Dictionary<string, string> requestBody);
        /// <summary>
        /// Submit the draft for approval
        /// </summary>
        /// <remarks>
        /// Moves the draft into submitted state.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubmitDraftForApprovalAsync (string draftId, string accept);

        /// <summary>
        /// Submit the draft for approval
        /// </summary>
        /// <remarks>
        /// Moves the draft into submitted state.
        /// </remarks>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubmitDraftForApprovalAsyncWithHttpInfo (string draftId, string accept);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDraftsApi : IDraftsApiSync, IDraftsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DraftsApi : IDraftsApi
    {
        private IO.Dyspatch.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DraftsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DraftsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DraftsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DraftsApi(String basePath)
        {
            this.Configuration = IO.Dyspatch.Client.Configuration.MergeConfigurations(
                IO.Dyspatch.Client.GlobalConfiguration.Instance,
                new IO.Dyspatch.Client.Configuration { BasePath = basePath }
            );
            this.Client = new IO.Dyspatch.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new IO.Dyspatch.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = IO.Dyspatch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DraftsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DraftsApi(IO.Dyspatch.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = IO.Dyspatch.Client.Configuration.MergeConfigurations(
                IO.Dyspatch.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new IO.Dyspatch.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new IO.Dyspatch.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = IO.Dyspatch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DraftsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DraftsApi(IO.Dyspatch.Client.ISynchronousClient client,IO.Dyspatch.Client.IAsynchronousClient asyncClient, IO.Dyspatch.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = IO.Dyspatch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IO.Dyspatch.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public IO.Dyspatch.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Dyspatch.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Dyspatch.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Remove a localization Deletes the localization with the given language ID if it exists
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns></returns>
        public void DeleteLocalization (string draftId, string languageId, string accept)
        {
             DeleteLocalizationWithHttpInfo(draftId, languageId, accept);
        }

        /// <summary>
        /// Remove a localization Deletes the localization with the given language ID if it exists
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public IO.Dyspatch.Client.ApiResponse<Object> DeleteLocalizationWithHttpInfo (string draftId, string languageId, string accept)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->DeleteLocalization");

            // verify the required parameter 'languageId' is set
            if (languageId == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'languageId' when calling DraftsApi->DeleteLocalization");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'accept' when calling DraftsApi->DeleteLocalization");

            IO.Dyspatch.Client.RequestOptions localVarRequestOptions = new IO.Dyspatch.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = IO.Dyspatch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = IO.Dyspatch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("draftId", IO.Dyspatch.Client.ClientUtils.ParameterToString(draftId)); // path parameter
            localVarRequestOptions.PathParameters.Add("languageId", IO.Dyspatch.Client.ClientUtils.ParameterToString(languageId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", IO.Dyspatch.Client.ClientUtils.ParameterToString(accept)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/drafts/{draftId}/localizations/{languageId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLocalization", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a localization Deletes the localization with the given language ID if it exists
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLocalizationAsync (string draftId, string languageId, string accept)
        {
             await DeleteLocalizationAsyncWithHttpInfo(draftId, languageId, accept);

        }

        /// <summary>
        /// Remove a localization Deletes the localization with the given language ID if it exists
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<IO.Dyspatch.Client.ApiResponse<Object>> DeleteLocalizationAsyncWithHttpInfo (string draftId, string languageId, string accept)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->DeleteLocalization");

            // verify the required parameter 'languageId' is set
            if (languageId == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'languageId' when calling DraftsApi->DeleteLocalization");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'accept' when calling DraftsApi->DeleteLocalization");


            IO.Dyspatch.Client.RequestOptions localVarRequestOptions = new IO.Dyspatch.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("draftId", IO.Dyspatch.Client.ClientUtils.ParameterToString(draftId)); // path parameter
            localVarRequestOptions.PathParameters.Add("languageId", IO.Dyspatch.Client.ClientUtils.ParameterToString(languageId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", IO.Dyspatch.Client.ClientUtils.ParameterToString(accept)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/drafts/{draftId}/localizations/{languageId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLocalization", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Draft by ID Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the template in the default, unlocalized form.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="targetLanguage">The type of templating language to compile as. Should only be used for visual templates.</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>DraftRead</returns>
        public DraftRead GetDraftById (string draftId, string targetLanguage, string accept)
        {
             IO.Dyspatch.Client.ApiResponse<DraftRead> localVarResponse = GetDraftByIdWithHttpInfo(draftId, targetLanguage, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Draft by ID Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the template in the default, unlocalized form.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="targetLanguage">The type of templating language to compile as. Should only be used for visual templates.</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>ApiResponse of DraftRead</returns>
        public IO.Dyspatch.Client.ApiResponse< DraftRead > GetDraftByIdWithHttpInfo (string draftId, string targetLanguage, string accept)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->GetDraftById");

            // verify the required parameter 'targetLanguage' is set
            if (targetLanguage == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'targetLanguage' when calling DraftsApi->GetDraftById");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'accept' when calling DraftsApi->GetDraftById");

            IO.Dyspatch.Client.RequestOptions localVarRequestOptions = new IO.Dyspatch.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.dyspatch.2020.08+json",
                "*/*"
            };

            var localVarContentType = IO.Dyspatch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = IO.Dyspatch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("draftId", IO.Dyspatch.Client.ClientUtils.ParameterToString(draftId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(IO.Dyspatch.Client.ClientUtils.ParameterToMultiMap("", "targetLanguage", targetLanguage));
            localVarRequestOptions.HeaderParameters.Add("Accept", IO.Dyspatch.Client.ClientUtils.ParameterToString(accept)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< DraftRead >("/drafts/{draftId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDraftById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Draft by ID Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the template in the default, unlocalized form.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="targetLanguage">The type of templating language to compile as. Should only be used for visual templates.</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>Task of DraftRead</returns>
        public async System.Threading.Tasks.Task<DraftRead> GetDraftByIdAsync (string draftId, string targetLanguage, string accept)
        {
             IO.Dyspatch.Client.ApiResponse<DraftRead> localVarResponse = await GetDraftByIdAsyncWithHttpInfo(draftId, targetLanguage, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Draft by ID Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the template in the default, unlocalized form.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="targetLanguage">The type of templating language to compile as. Should only be used for visual templates.</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>Task of ApiResponse (DraftRead)</returns>
        public async System.Threading.Tasks.Task<IO.Dyspatch.Client.ApiResponse<DraftRead>> GetDraftByIdAsyncWithHttpInfo (string draftId, string targetLanguage, string accept)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->GetDraftById");

            // verify the required parameter 'targetLanguage' is set
            if (targetLanguage == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'targetLanguage' when calling DraftsApi->GetDraftById");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'accept' when calling DraftsApi->GetDraftById");


            IO.Dyspatch.Client.RequestOptions localVarRequestOptions = new IO.Dyspatch.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.dyspatch.2020.08+json",
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("draftId", IO.Dyspatch.Client.ClientUtils.ParameterToString(draftId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(IO.Dyspatch.Client.ClientUtils.ParameterToMultiMap("", "targetLanguage", targetLanguage));
            localVarRequestOptions.HeaderParameters.Add("Accept", IO.Dyspatch.Client.ClientUtils.ParameterToString(accept)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DraftRead>("/drafts/{draftId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDraftById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get localization keys Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2020.08+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2020.08+x-gettext-translation&#x60; to get the POT file.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>List&lt;LocalizationKeyRead&gt;</returns>
        public List<LocalizationKeyRead> GetDraftLocalizationKeys (string draftId, string accept)
        {
             IO.Dyspatch.Client.ApiResponse<List<LocalizationKeyRead>> localVarResponse = GetDraftLocalizationKeysWithHttpInfo(draftId, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get localization keys Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2020.08+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2020.08+x-gettext-translation&#x60; to get the POT file.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>ApiResponse of List&lt;LocalizationKeyRead&gt;</returns>
        public IO.Dyspatch.Client.ApiResponse< List<LocalizationKeyRead> > GetDraftLocalizationKeysWithHttpInfo (string draftId, string accept)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->GetDraftLocalizationKeys");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'accept' when calling DraftsApi->GetDraftLocalizationKeys");

            IO.Dyspatch.Client.RequestOptions localVarRequestOptions = new IO.Dyspatch.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.dyspatch.2020.08+json",
                "text/vnd.dyspatch.2020.08+x-gettext-translation"
            };

            var localVarContentType = IO.Dyspatch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = IO.Dyspatch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("draftId", IO.Dyspatch.Client.ClientUtils.ParameterToString(draftId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", IO.Dyspatch.Client.ClientUtils.ParameterToString(accept)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<LocalizationKeyRead> >("/drafts/{draftId}/localizationKeys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDraftLocalizationKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get localization keys Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2020.08+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2020.08+x-gettext-translation&#x60; to get the POT file.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>Task of List&lt;LocalizationKeyRead&gt;</returns>
        public async System.Threading.Tasks.Task<List<LocalizationKeyRead>> GetDraftLocalizationKeysAsync (string draftId, string accept)
        {
             IO.Dyspatch.Client.ApiResponse<List<LocalizationKeyRead>> localVarResponse = await GetDraftLocalizationKeysAsyncWithHttpInfo(draftId, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get localization keys Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2020.08+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2020.08+x-gettext-translation&#x60; to get the POT file.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>Task of ApiResponse (List&lt;LocalizationKeyRead&gt;)</returns>
        public async System.Threading.Tasks.Task<IO.Dyspatch.Client.ApiResponse<List<LocalizationKeyRead>>> GetDraftLocalizationKeysAsyncWithHttpInfo (string draftId, string accept)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->GetDraftLocalizationKeys");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'accept' when calling DraftsApi->GetDraftLocalizationKeys");


            IO.Dyspatch.Client.RequestOptions localVarRequestOptions = new IO.Dyspatch.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.dyspatch.2020.08+json",
                "text/vnd.dyspatch.2020.08+x-gettext-translation"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("draftId", IO.Dyspatch.Client.ClientUtils.ParameterToString(draftId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", IO.Dyspatch.Client.ClientUtils.ParameterToString(accept)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<LocalizationKeyRead>>("/drafts/{draftId}/localizationKeys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDraftLocalizationKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Drafts Returns all drafts for your organization.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="cursor">A cursor value used to retrieve a specific page from a paginated result set. (optional)</param>
        /// <param name="status">Filter the list of drafts by a particular status (optional)</param>
        /// <returns>DraftsRead</returns>
        public DraftsRead GetDrafts (string accept, string cursor = default(string), string status = default(string))
        {
             IO.Dyspatch.Client.ApiResponse<DraftsRead> localVarResponse = GetDraftsWithHttpInfo(accept, cursor, status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Drafts Returns all drafts for your organization.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="cursor">A cursor value used to retrieve a specific page from a paginated result set. (optional)</param>
        /// <param name="status">Filter the list of drafts by a particular status (optional)</param>
        /// <returns>ApiResponse of DraftsRead</returns>
        public IO.Dyspatch.Client.ApiResponse< DraftsRead > GetDraftsWithHttpInfo (string accept, string cursor = default(string), string status = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'accept' when calling DraftsApi->GetDrafts");

            IO.Dyspatch.Client.RequestOptions localVarRequestOptions = new IO.Dyspatch.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.dyspatch.2020.08+json",
                "*/*"
            };

            var localVarContentType = IO.Dyspatch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = IO.Dyspatch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(IO.Dyspatch.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(IO.Dyspatch.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", IO.Dyspatch.Client.ClientUtils.ParameterToString(accept)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< DraftsRead >("/drafts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDrafts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Drafts Returns all drafts for your organization.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="cursor">A cursor value used to retrieve a specific page from a paginated result set. (optional)</param>
        /// <param name="status">Filter the list of drafts by a particular status (optional)</param>
        /// <returns>Task of DraftsRead</returns>
        public async System.Threading.Tasks.Task<DraftsRead> GetDraftsAsync (string accept, string cursor = default(string), string status = default(string))
        {
             IO.Dyspatch.Client.ApiResponse<DraftsRead> localVarResponse = await GetDraftsAsyncWithHttpInfo(accept, cursor, status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Drafts Returns all drafts for your organization.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="cursor">A cursor value used to retrieve a specific page from a paginated result set. (optional)</param>
        /// <param name="status">Filter the list of drafts by a particular status (optional)</param>
        /// <returns>Task of ApiResponse (DraftsRead)</returns>
        public async System.Threading.Tasks.Task<IO.Dyspatch.Client.ApiResponse<DraftsRead>> GetDraftsAsyncWithHttpInfo (string accept, string cursor = default(string), string status = default(string))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'accept' when calling DraftsApi->GetDrafts");


            IO.Dyspatch.Client.RequestOptions localVarRequestOptions = new IO.Dyspatch.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.dyspatch.2020.08+json",
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(IO.Dyspatch.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(IO.Dyspatch.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", IO.Dyspatch.Client.ClientUtils.ParameterToString(accept)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DraftsRead>("/drafts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDrafts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get localizations on a draft Returns localization metadata for the draft
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>List&lt;LocalizationMetaRead&gt;</returns>
        public List<LocalizationMetaRead> GetLocalizationForDraft (string draftId, string accept)
        {
             IO.Dyspatch.Client.ApiResponse<List<LocalizationMetaRead>> localVarResponse = GetLocalizationForDraftWithHttpInfo(draftId, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get localizations on a draft Returns localization metadata for the draft
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>ApiResponse of List&lt;LocalizationMetaRead&gt;</returns>
        public IO.Dyspatch.Client.ApiResponse< List<LocalizationMetaRead> > GetLocalizationForDraftWithHttpInfo (string draftId, string accept)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->GetLocalizationForDraft");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'accept' when calling DraftsApi->GetLocalizationForDraft");

            IO.Dyspatch.Client.RequestOptions localVarRequestOptions = new IO.Dyspatch.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.dyspatch.2020.08+json"
            };

            var localVarContentType = IO.Dyspatch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = IO.Dyspatch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("draftId", IO.Dyspatch.Client.ClientUtils.ParameterToString(draftId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", IO.Dyspatch.Client.ClientUtils.ParameterToString(accept)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<LocalizationMetaRead> >("/drafts/{draftId}/localizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocalizationForDraft", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get localizations on a draft Returns localization metadata for the draft
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>Task of List&lt;LocalizationMetaRead&gt;</returns>
        public async System.Threading.Tasks.Task<List<LocalizationMetaRead>> GetLocalizationForDraftAsync (string draftId, string accept)
        {
             IO.Dyspatch.Client.ApiResponse<List<LocalizationMetaRead>> localVarResponse = await GetLocalizationForDraftAsyncWithHttpInfo(draftId, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get localizations on a draft Returns localization metadata for the draft
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>Task of ApiResponse (List&lt;LocalizationMetaRead&gt;)</returns>
        public async System.Threading.Tasks.Task<IO.Dyspatch.Client.ApiResponse<List<LocalizationMetaRead>>> GetLocalizationForDraftAsyncWithHttpInfo (string draftId, string accept)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->GetLocalizationForDraft");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'accept' when calling DraftsApi->GetLocalizationForDraft");


            IO.Dyspatch.Client.RequestOptions localVarRequestOptions = new IO.Dyspatch.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.dyspatch.2020.08+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("draftId", IO.Dyspatch.Client.ClientUtils.ParameterToString(draftId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", IO.Dyspatch.Client.ClientUtils.ParameterToString(accept)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<LocalizationMetaRead>>("/drafts/{draftId}/localizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocalizationForDraft", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or update a localization Inserts a localization or sets the name on an existing localization that already uses the languageId
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="inlineObject"></param>
        /// <returns></returns>
        public void SaveLocalization (string draftId, string languageId, string accept, InlineObject inlineObject)
        {
             SaveLocalizationWithHttpInfo(draftId, languageId, accept, inlineObject);
        }

        /// <summary>
        /// Create or update a localization Inserts a localization or sets the name on an existing localization that already uses the languageId
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="inlineObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public IO.Dyspatch.Client.ApiResponse<Object> SaveLocalizationWithHttpInfo (string draftId, string languageId, string accept, InlineObject inlineObject)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->SaveLocalization");

            // verify the required parameter 'languageId' is set
            if (languageId == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'languageId' when calling DraftsApi->SaveLocalization");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'accept' when calling DraftsApi->SaveLocalization");

            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'inlineObject' when calling DraftsApi->SaveLocalization");

            IO.Dyspatch.Client.RequestOptions localVarRequestOptions = new IO.Dyspatch.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = IO.Dyspatch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = IO.Dyspatch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("draftId", IO.Dyspatch.Client.ClientUtils.ParameterToString(draftId)); // path parameter
            localVarRequestOptions.PathParameters.Add("languageId", IO.Dyspatch.Client.ClientUtils.ParameterToString(languageId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", IO.Dyspatch.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = inlineObject;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/drafts/{draftId}/localizations/{languageId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveLocalization", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or update a localization Inserts a localization or sets the name on an existing localization that already uses the languageId
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="inlineObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SaveLocalizationAsync (string draftId, string languageId, string accept, InlineObject inlineObject)
        {
             await SaveLocalizationAsyncWithHttpInfo(draftId, languageId, accept, inlineObject);

        }

        /// <summary>
        /// Create or update a localization Inserts a localization or sets the name on an existing localization that already uses the languageId
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="inlineObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<IO.Dyspatch.Client.ApiResponse<Object>> SaveLocalizationAsyncWithHttpInfo (string draftId, string languageId, string accept, InlineObject inlineObject)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->SaveLocalization");

            // verify the required parameter 'languageId' is set
            if (languageId == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'languageId' when calling DraftsApi->SaveLocalization");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'accept' when calling DraftsApi->SaveLocalization");

            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'inlineObject' when calling DraftsApi->SaveLocalization");


            IO.Dyspatch.Client.RequestOptions localVarRequestOptions = new IO.Dyspatch.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("draftId", IO.Dyspatch.Client.ClientUtils.ParameterToString(draftId)); // path parameter
            localVarRequestOptions.PathParameters.Add("languageId", IO.Dyspatch.Client.ClientUtils.ParameterToString(languageId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", IO.Dyspatch.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = inlineObject;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/drafts/{draftId}/localizations/{languageId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveLocalization", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set translations for language Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="requestBody"></param>
        /// <returns></returns>
        public void SetTranslation (string draftId, string languageId, string accept, Dictionary<string, string> requestBody)
        {
             SetTranslationWithHttpInfo(draftId, languageId, accept, requestBody);
        }

        /// <summary>
        /// Set translations for language Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="requestBody"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public IO.Dyspatch.Client.ApiResponse<Object> SetTranslationWithHttpInfo (string draftId, string languageId, string accept, Dictionary<string, string> requestBody)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->SetTranslation");

            // verify the required parameter 'languageId' is set
            if (languageId == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'languageId' when calling DraftsApi->SetTranslation");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'accept' when calling DraftsApi->SetTranslation");

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'requestBody' when calling DraftsApi->SetTranslation");

            IO.Dyspatch.Client.RequestOptions localVarRequestOptions = new IO.Dyspatch.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = IO.Dyspatch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = IO.Dyspatch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("draftId", IO.Dyspatch.Client.ClientUtils.ParameterToString(draftId)); // path parameter
            localVarRequestOptions.PathParameters.Add("languageId", IO.Dyspatch.Client.ClientUtils.ParameterToString(languageId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", IO.Dyspatch.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/drafts/{draftId}/localizations/{languageId}/translations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetTranslation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set translations for language Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="requestBody"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetTranslationAsync (string draftId, string languageId, string accept, Dictionary<string, string> requestBody)
        {
             await SetTranslationAsyncWithHttpInfo(draftId, languageId, accept, requestBody);

        }

        /// <summary>
        /// Set translations for language Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="languageId">A language ID (eg: en-US)</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <param name="requestBody"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<IO.Dyspatch.Client.ApiResponse<Object>> SetTranslationAsyncWithHttpInfo (string draftId, string languageId, string accept, Dictionary<string, string> requestBody)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->SetTranslation");

            // verify the required parameter 'languageId' is set
            if (languageId == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'languageId' when calling DraftsApi->SetTranslation");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'accept' when calling DraftsApi->SetTranslation");

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'requestBody' when calling DraftsApi->SetTranslation");


            IO.Dyspatch.Client.RequestOptions localVarRequestOptions = new IO.Dyspatch.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("draftId", IO.Dyspatch.Client.ClientUtils.ParameterToString(draftId)); // path parameter
            localVarRequestOptions.PathParameters.Add("languageId", IO.Dyspatch.Client.ClientUtils.ParameterToString(languageId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", IO.Dyspatch.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/drafts/{draftId}/localizations/{languageId}/translations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetTranslation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit the draft for approval Moves the draft into submitted state.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns></returns>
        public void SubmitDraftForApproval (string draftId, string accept)
        {
             SubmitDraftForApprovalWithHttpInfo(draftId, accept);
        }

        /// <summary>
        /// Submit the draft for approval Moves the draft into submitted state.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public IO.Dyspatch.Client.ApiResponse<Object> SubmitDraftForApprovalWithHttpInfo (string draftId, string accept)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->SubmitDraftForApproval");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'accept' when calling DraftsApi->SubmitDraftForApproval");

            IO.Dyspatch.Client.RequestOptions localVarRequestOptions = new IO.Dyspatch.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = IO.Dyspatch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = IO.Dyspatch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("draftId", IO.Dyspatch.Client.ClientUtils.ParameterToString(draftId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", IO.Dyspatch.Client.ClientUtils.ParameterToString(accept)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/drafts/{draftId}/publishRequest", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitDraftForApproval", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit the draft for approval Moves the draft into submitted state.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubmitDraftForApprovalAsync (string draftId, string accept)
        {
             await SubmitDraftForApprovalAsyncWithHttpInfo(draftId, accept);

        }

        /// <summary>
        /// Submit the draft for approval Moves the draft into submitted state.
        /// </summary>
        /// <exception cref="IO.Dyspatch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">A draft ID</param>
        /// <param name="accept">A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<IO.Dyspatch.Client.ApiResponse<Object>> SubmitDraftForApprovalAsyncWithHttpInfo (string draftId, string accept)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->SubmitDraftForApproval");

            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new IO.Dyspatch.Client.ApiException(400, "Missing required parameter 'accept' when calling DraftsApi->SubmitDraftForApproval");


            IO.Dyspatch.Client.RequestOptions localVarRequestOptions = new IO.Dyspatch.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("draftId", IO.Dyspatch.Client.ClientUtils.ParameterToString(draftId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", IO.Dyspatch.Client.ClientUtils.ParameterToString(accept)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/drafts/{draftId}/publishRequest", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitDraftForApproval", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
