/* 
 * Dyspatch API
 *
 * # Introduction  The Dyspatch API is based on the REST paradigm, and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs, and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.  ## API Client Libraries Dyspatch provides API Clients for popular languages and web frameworks.  - [Java](https://github.com/getdyspatch/dyspatch-java) - [Javascript](https://github.com/getdyspatch/dyspatch-javascript) - [Python](https://github.com/getdyspatch/dyspatch-python) - [C#](https://github.com/getdyspatch/dyspatch-dotnet) - [Go](https://github.com/getdyspatch/dyspatch-golang) - [Ruby](https://github.com/getdyspatch/dyspatch-ruby) 
 *
 * The version of the OpenAPI document: 2020.08
 * Contact: support@dyspatch.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using IO.Dyspatch.Client;
using IO.Dyspatch.Api;
using IO.Dyspatch.Model;

namespace IO.Dyspatch.Test
{
    /// <summary>
    ///  Class for testing DraftsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DraftsApiTests : IDisposable
    {
        private DraftsApi instance;

        public DraftsApiTests()
        {
            instance = new DraftsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DraftsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DraftsApi
            //Assert.IsType(typeof(DraftsApi), instance, "instance is a DraftsApi");
        }

        
        /// <summary>
        /// Test DeleteLocalization
        /// </summary>
        [Fact]
        public void DeleteLocalizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string draftId = null;
            //string languageId = null;
            //string accept = null;
            //instance.DeleteLocalization(draftId, languageId, accept);
            
        }
        
        /// <summary>
        /// Test GetDraftById
        /// </summary>
        [Fact]
        public void GetDraftByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string draftId = null;
            //string targetLanguage = null;
            //string accept = null;
            //var response = instance.GetDraftById(draftId, targetLanguage, accept);
            //Assert.IsType<DraftRead> (response, "response is DraftRead");
        }
        
        /// <summary>
        /// Test GetDraftLocalizationKeys
        /// </summary>
        [Fact]
        public void GetDraftLocalizationKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string draftId = null;
            //string accept = null;
            //var response = instance.GetDraftLocalizationKeys(draftId, accept);
            //Assert.IsType<List<LocalizationKeyRead>> (response, "response is List<LocalizationKeyRead>");
        }
        
        /// <summary>
        /// Test GetDrafts
        /// </summary>
        [Fact]
        public void GetDraftsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string cursor = null;
            //string status = null;
            //var response = instance.GetDrafts(accept, cursor, status);
            //Assert.IsType<DraftsRead> (response, "response is DraftsRead");
        }
        
        /// <summary>
        /// Test GetLocalizationForDraft
        /// </summary>
        [Fact]
        public void GetLocalizationForDraftTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string draftId = null;
            //string accept = null;
            //var response = instance.GetLocalizationForDraft(draftId, accept);
            //Assert.IsType<List<LocalizationMetaRead>> (response, "response is List<LocalizationMetaRead>");
        }
        
        /// <summary>
        /// Test SaveLocalization
        /// </summary>
        [Fact]
        public void SaveLocalizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string draftId = null;
            //string languageId = null;
            //string accept = null;
            //InlineObject inlineObject = null;
            //instance.SaveLocalization(draftId, languageId, accept, inlineObject);
            
        }
        
        /// <summary>
        /// Test SetTranslation
        /// </summary>
        [Fact]
        public void SetTranslationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string draftId = null;
            //string languageId = null;
            //string accept = null;
            //Dictionary<string, string> requestBody = null;
            //instance.SetTranslation(draftId, languageId, accept, requestBody);
            
        }
        
        /// <summary>
        /// Test SubmitDraftForApproval
        /// </summary>
        [Fact]
        public void SubmitDraftForApprovalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string draftId = null;
            //string accept = null;
            //instance.SubmitDraftForApproval(draftId, accept);
            
        }
        
    }

}
